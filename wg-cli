#!/bin/bash

TARGET_FOLDER="./configurations"
SERVER_PORT="9888"
SERVER_ENDPOINT="YOUR_SERVER_EXTERNAL_IP:$SERVER_PORT"
SERVER_INTERFACE="enp0s3"
IP_BASE="10.200.200"
MASK="32"
SERVER_IP="$IP_BASE.1/$MASK"
SERVER_DNS="1.1.1.1"

usage()
{
    echo ""
    echo "CLI helper to handle the basic WireGuard configuration stuff."
    echo ""
    echo "Usage: wg-cli [[[-g [client-name]] | [-i] | [-a client-name] | [-c client-name] | [-h] | [-q client-name]]"
    echo ""
    echo "Arguments: "
    echo "      -i                    Init the server configuration file."
    echo "      -g [client-name]      Generate a new key pair, if no « client-name » specified its generate the server key/pair."
    echo "      -c client-name        Create a new client."
    echo "      -a client-name        Add the requested client into the server configuration."
    echo "      -q client-name        Show the QRCode of the requested « client-name »."
    echo "      -h                    Print help (this text) and exit."
    echo ""
    echo "Quick usage: "
    echo "Create a client and the server configuration. "
    echo ""
    echo "    $ wg-cli -a client"
    echo "    $ wg-cli -q client"
    echo ""
}

generate_key()
{
    TARGET_KEY_FOLDER=$TARGET_FOLDER/$1/keys
    if [ -z "$1" ]; then
        TARGET_KEY_FOLDER=$TARGET_FOLDER/keys
    fi
    CURRENT_PATH="`pwd`"

    if [ -f "$TARGET_KEY_FOLDER/privatekey" ]; then
        echo "Key pair seems already present… Ignoring !"
        return
    fi

    echo ""
    echo "=============================================="
    echo "= Generating a new Public / Private keys for ="
    echo "=============================================="

    mkdir -p $TARGET_KEY_FOLDER
    cd $TARGET_KEY_FOLDER
    umask 077
    wg genkey | tee privatekey | wg pubkey > publickey
    cd $CURRENT_PATH

    echo ""
    echo "> New key generated in « $TARGET_KEY_FOLDER »"
}

init_server()
{
    # Get the private key of the server
    PRIVATEKEY="`cat $TARGET_FOLDER/keys/privatekey 2>/dev/null`"
    if [ -z "$PRIVATEKEY" ]; then
        # No key ? Generate a new key pair
        generate_key ""
        PRIVATEKEY="`cat $TARGET_FOLDER/keys/privatekey 2>/dev/null`"
    fi

    echo ""
    echo "====================================="
    echo "= Create a new server configuration ="
    echo "====================================="

    # Server configuration
    echo "[Interface]
PrivateKey = $PRIVATEKEY
Address = $SERVER_IP
ListenPort = $SERVER_PORT
PostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o $SERVER_INTERFACE -j MASQUERADE; ip6tables -A FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -A POSTROUTING -o $SERVER_INTERFACE -j MASQUERADE
PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o $SERVER_INTERFACE -j MASQUERADE; ip6tables -D FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -D POSTROUTING -o $SERVER_INTERFACE -j MASQUERADE
" > "$TARGET_FOLDER/wg0.conf"


    # Enable IPV4 forwarding
    # perl -pi -e 's/#{1,}?net.ipv4.ip_forward ?= ?(0|1)/net.ipv4.ip_forward = 1/g' /etc/sysctl.conf 
    # sysctl -p

    echo ""
    echo "If you want Internet shared with your client, don't forget to enable ipv4 forwarding."
    echo "vim /etc/systctl.conf"
    echo "# and then"
    echo "sysctl -p"
}

create_client()
{
    CLIENT_PATH=$1
    CLIENT_TARGET_PATH="$TARGET_FOLDER/$CLIENT_PATH"

    CLIENTS_FOLDER_PATH="$TARGET_FOLDER/clients/"
    CLIENT_COUNT=`ls -l $CLIENTS_FOLDER_PATH | grep -c ^d`
    CLIENT_IP="$IP_BASE.$((CLIENT_COUNT+2))/$MASK"

    if [ -d "$CLIENT_TARGET_PATH" ]; then
        echo "Client configuration folder seems already present… Ignoring !"
        exit 1
    fi

    # Create target path
    mkdir -p "$CLIENT_TARGET_PATH/"

    # Get the public key of the server
    SERVER_PUBLICKEY="`cat $TARGET_FOLDER/keys/publickey 2>/dev/null`"
    if [ -z "$SERVER_PUBLICKEY" ]; then
        init_server
        SERVER_PUBLICKEY="`cat $TARGET_FOLDER/keys/publickey 2>/dev/null`"
    fi

    # Get the private key of the client
    CLIENT_PRIVATE_KEY="`cat $TARGET_FOLDER/$CLIENT_PATH/keys/privatekey 2>/dev/null`"
    if [ -z "$CLIENT_PRIVATE_KEY" ]; then
        generate_key $CLIENT_PATH
        CLIENT_PRIVATE_KEY="`cat $TARGET_FOLDER/$CLIENT_PATH/keys/privatekey 2>/dev/null`"
    fi

    echo ""
    echo "====================================="
    echo "= Create a new client configuration ="
    echo "====================================="


    echo "[Interface]
PrivateKey = $CLIENT_PRIVATE_KEY 
Address = $CLIENT_IP
DNS = $SERVER_DNS

[Peer]
PublicKey = $SERVER_PUBLICKEY
Endpoint = $SERVER_ENDPOINT
AllowedIPs = 0.0.0.0/0, ::/0
" > "$CLIENT_TARGET_PATH/wg0.conf"

    echo ""
    echo "> New configuration generated in « $CLIENT_TARGET_PATH/wg0.conf »"
}

add_client()
{
    CLIENT_PATH=$1
    CLIENT_TARGET_PATH="$TARGET_FOLDER/$CLIENT_PATH"
    SERVER_CONFIGURATION_FILE_PATH="$TARGET_FOLDER/wg0.conf"
    CLIENT_IP=`grep "Address = " $CLIENT_TARGET_PATH/wg0.conf | sed "s/Address = //"`

    # Get the public key of the client
    CLIENT_PUBLIC_KEY="`cat $TARGET_FOLDER/$CLIENT_PATH/keys/publickey 2>/dev/null`"
    if [ -z "$CLIENT_PUBLIC_KEY" ]; then
        create_client $CLIENT_PATH
        CLIENT_PUBLIC_KEY="`cat $TARGET_FOLDER/$CLIENT_PATH/keys/publickey 2>/dev/null`"
    fi

    if [ ! -f "$SERVER_CONFIGURATION_FILE_PATH" ]; then
        echo "Server configuration is missing… Generating a new one and continue !"
        init_server
    fi

    echo ""
    echo "================================================"
    echo "= Add the client into the server configuration ="
    echo "================================================"

echo "
[Peer]
PublicKey = $CLIENT_PUBLIC_KEY
AllowedIPs = $CLIENT_IP" >> $SERVER_CONFIGURATION_FILE_PATH

    echo ""
    echo "Configuration updated. Reload the server to update the loaded configuration."

}

get_client_qr(){
    CLIENT_TARGET_PATH="$TARGET_FOLDER/$1"

    if [ ! -f "$CLIENT_TARGET_PATH/wg0.conf" ]; then
        echo ""
        echo "The requested client is missing… Ignoring !"
        echo ""
        exit 1
    fi

    qrencode -t ansiutf8 < "$CLIENT_TARGET_PATH/wg0.conf"

    echo ""
    echo "You can scan this QRCode with your Wireguard application to add the client configuration on your smarpthone."
    echo ""
}

if [ -z "$1" ]; then
    usage
fi

while [ "$1" != "" ]; do
    case $1 in
        -g | --generate-key )   shift
                                if [ -z "$1" ]; then
                                    generate_key ""
                                else
                                    generate_key "clients/$1"
                                fi
                                exit
                                ;;
        -i | --init-server )    shift
                                init_server
                                exit
                                ;;
        -c | --create-client )  shift
                                if [ -z "$1" ]; then
                                    echo "Usage: wg-cli -c client_name"
                                    exit 1
                                else
                                    create_client "clients/$1" "$2"
                                fi
                                exit
                                ;;
        -a | --add-client )     shift
                                if [ -z "$1" ]; then
                                    echo "Usage: wg-cli -a client_name"
                                    exit 1
                                else
                                    add_client "clients/$1"
                                fi
                                exit
                                ;;
        -q | --get-client-qr )  shift
                                if [ -z "$1" ]; then
                                    echo "Usage: wg-cli -q client_name"
                                    exit 1
                                fi
                                get_client_qr "clients/$1"
                                exit
                                ;;
        -h | --help )           usage
                                exit
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done